x = read.table("student.txt", header=TRUE)
x = read.table("students.txt", header=TRUE)
x = read.table("students.txt", header=TRUE)
x = read.table("/Users/sajalshrestha/Documents/data-science-and-analytics/cis-635-knowledge-discovery-and-data-mining/students.txt", header=TRUE)
View(x)
View(x)
nrow(x)
x[,2]
x[,1]
x[,3]
x[,4]
x[,4] ==28
c(1,2,3)
c(2,2,2)
a = c(2,2,2)
b = c(1,2,3)
a * b
x[1,1]
x[1,2]
installed.packages()
?datasets
dir()
getwd()
names(iris)
attributes(iris)
# a
0.65 * 0.55 * 0.70 * dnorm(66, 64, 8) * dnorm(50, 71, 8)
# a n
n = 0.65 * 0.55 * 0.70 * dnorm(66, 64, 8) * dnorm(50, 71, 8)
print(n)
y = 0.35 * 0.48 * 0.25 * dnorm(66, 74, 8) * dnorm(50, 58, 10)
print(y)
#b
n = 0.65 * 0.45 * 0.15 * dnorm(90, 64, 8) * dnorm(81, 71, 8)
print(n)
y = 0.35 * 0.52 * 0.20 * dnorm(90, 74, 8) * dnorm(81, 58, 10)
print(y)
#b
n = 0.65 * 0.45  * 0.15  * dnorm(90, 64, 8) * dnorm(55, 71, 8)
print(n)
y = 0.35 * 0.52  * 0.45  * dnorm(90, 74, 8) * dnorm(55, 58, 10)
print(y)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df)
setwd("~/Documents/GVSU/cis-635-knowledge-discovery-and-data-mining/week04")
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df)
library(e1071)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df)
# display the model
print(model)
opar = par(mfrow=c(2, 2), mar=c(4,0,0,0))
plot(model, main="")
df[1:50]
df[1:50,]
df[50:100,]
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[1:50])
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[1:50,])
# display the model
print(model)
predict(model, df[50:100,])
pred = predict(model, df[50:100,])
pred$approval
pred = predict(model, df[50:100,])
table(pred$first)
pred = predict(model, df[50:100,])
caret::confusionMatric(pred)
pred = predict(model, df[50:100,])
pred
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df)
# display the model
print(model)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[1:50,])
# display the model
print(model)
pred = predict(model, df[50:100,])
table(pred, df$approval)
pred = predict(model, df[50:100,], type="class")
table(pred, df$approval)
pred = predict(model, df[50:100,], type="class")
table(pred, df$approval,dnn=c("Prediction","Actual"))
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[1:50,], laplace = 1)
# display the model
print(model)
pred = predict(model, df[50:100,], type="class")
table(pred, df$approval,dnn=c("Prediction","Actual"))
pred = predict(model, df[50:100,], type="class")
table(pred, df,dnn=c("Prediction","Actual"))
pred = predict(model, df[50:100,], type="class")
table(pred, df[50:100,]$approval,dnn=c("Prediction","Actual"))
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[1:50,])
# display the model
print(model)
pred = predict(model, df[50:100,], type="class")
table(pred, df[50:100,]$approval,dnn=c("Prediction","Actual"))
plot(model)
head(cbind(predict, df[50:100,]))
pred = predict(model, df[50:100,], type="class")
table(pred, df[50:100,]$approval)
pred = predict(model, df[50:100,], type="class")
tab = table(pred, df[50:100,]$approval)
1 - sum(diag(tab1)) / sum(tab)
pred = predict(model, df[50:100,], type="class")
tab = table(pred, df[50:100,]$approval)
1 - sum(diag(tab)) / sum(tab)
pred = predict(model, df[50:100,])
tab = table(pred, df[50:100,]$approval)
1 - sum(diag(tab)) / sum(tab)
pred = predict(model, df[50:100,])
tab = table(pred, df[50:100,]$approval)
1 - sum(diag(tab)) / sum(tab)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[1:80,])
# display the model
print(model)
pred = predict(model, df[81:100,])
tab = table(pred, df[81:100,]$approval)
1 - sum(diag(tab)) / sum(tab)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df)
# display the model
print(model)
pairs(df)
pairs(df[, 3:14])
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[, 3:14])
# display the model
print(model)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~pol+approval, df[, 3:14])
# display the model
print(model)
# read the data
df = read.table("hw03dataSenate.txt", header = TRUE)
# make pol, law, mil, soc, edu, med, bus, agr, fin and approval, factors
colFactNames = c("pol", "law", "mil", "soc", "edu", "med", "bus", "agr", "fin", "approval")
for (col in colnames(df)) {
if(!is.element(col, colFactNames)) {next}
df[,col] = as.factor(df[,col])
}
# build a model using approval as the class and the rest of the attributes
model = naiveBayes(approval~., df[, 3:14])
# display the model
print(model)
setwd("~/Documents/GVSU/cis-635-knowledge-discovery-and-data-mining/week05")
setwd("~/Documents/GVSU/cis-635-knowledge-discovery-and-data-mining/week04")
