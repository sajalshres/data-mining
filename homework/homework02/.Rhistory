# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
print(sample(tchrAsstData[,6], 25))
print(mean(tchrAsstData[, 6]))
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
print(sample(tchrAsstData[,6], 25))
print(mean(tchrAsstData[, 6]))
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
print(sample(tchrAsstData[,6], 25))
print(mean(tchrAsstData[, 6]))
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
meanValue = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(meanValue - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
print(newMeanNum)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result vector
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result vector
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result vector
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result vector
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(25, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result vector
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(50, mean(tchrAsstData[, 6]))
# 3. write a function that takes a parameter for the number of samples and the mean (you can use the
# value from #1). In the function use a for loop that iterates 10 times.
# - Each time it will sample the number of records using the parameter.
# - Each time you sample, calculate the mean value of classSize.
# - Calculate the absolute value of the difference between this mean from the parameter
# mean. After the loop, return the average of the differences calculated in the loop.
avgDiffSample = function(numOfSamples, meanNum) {
result = c()
for (item in 1:10) {
# Each time it will sample the number of records using the parameter
newSample = sample(tchrAsstData[,6], numOfSamples)
# Each time you sample, calculate the mean value of classSize
newMeanNum = mean(newSample)
# calculate the absolute value of the difference between this mean from the parameter
diff = abs(newMeanNum - meanNum)
# append to result vector
result = c(result, diff)
}
# return the average of the differences calculated in the loop.
return( mean(result) )
}
avgDiffSample(100, mean(tchrAsstData[, 6]))
nrow(tchrAsstData)
