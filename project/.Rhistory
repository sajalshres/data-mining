df <-  df %>% relocate(atRisk, .after = diarrhea)
return(df)
}
train_df <- load_and_merge_data(file_name_a = "data8_A_train.txt", file_name_b = "data8_B_train.txt")
test_df <- load_and_merge_data(file_name_a = "data8_A_test.txt", file_name_b = "data8_B_test.txt")
cat("Dataset Summary:\n")
print(summary(train_df))
# Discard the rows that have for than 4 missing columns
ind <- rowSums(is.na(train_df)) > 2
missing_train_df <- train_df[ind,]
train_df <- train_df[!ind,]
print(train_df[!complete.cases(train_df),])
# estimate values for temp, bpSys, vo2 and throat using mean
for (i in 2:7) {
train_df[, i][is.na(train_df[, i])] <- mean(train_df[, i], na.rm = TRUE)
}
print(train_df[!complete.cases(train_df),])
# Only values less than 0 seems as noise
train_df[train_df < 0] = NA
noise_df = train_df[!complete.cases(train_df), ]
# only temp, bpSys, vo2 has noise in 3 rows
# estimate values for temp, bpSys, vo2 using mean
for (i in 2:4) {
train_df[, i][is.na(train_df[, i])] <- mean(train_df[, i], na.rm = TRUE)
}
#train_df = train_df[complete.cases(train_df), ]
# remove id as it is not required during training
train_df <- subset(train_df, select=-id)
get_normalized_data <- function(data) {
norm_value <- (data - min(data)) / (max(data) - min(data))
return(norm_value)
}
normalized_df <- as.data.frame(lapply(train_df[1:6], get_normalized_data))
head(normalized_df)
set.seed(123)
km = kmeans(normalized_df, 5)
print(km$size)
print(km$centers)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==1,]
build_decision_tree(df_cluster_1, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==1,]
build_decision_tree(train_df, test_df)
get_results <- function(c) {
TP <- c[1, 1]
FP <- c[1, 2]
FN <- c[2, 1]
TN <- c[2, 2]
acc <- (TP + TN) / (TP + FP + FN + TN) * 100
pre <- (TP) / (TP + FP) * 100
rec <- (TP) / (TP + FN) * 100
print(paste("Accuracy:", acc, "Precision:",  pre, "Recall:",  rec))
}
get_results(dt_c_matrix)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==1,]
build_decision_tree(train_df, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==1,]
build_decision_tree(df_cluster_1, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==1,]
build_decision_tree(df_cluster_1, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==2,]
build_decision_tree(df_cluster_1, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==2,]
df_cluster_1$headA <- as.factor(df_cluster_1$headA)
build_decision_tree(df_cluster_1, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==2,]
df_cluster_1$headA <- as.factor(df_cluster_1$headA)
build_decision_tree(df_cluster_1, test_df)
library(rpart)
library(rpart.plot)
build_decision_tree <- function(df, test_df) {
set.seed(123)
# combine normalized data and factor of
dt_df <- cbind(df[1:4], as.data.frame(lapply(df[5:11], as.factor)))
# build model
dt_mod  <- rpart(atRisk ~ ., dt_df, method = "class")
# perform predictions
dt_test_df <- cbind(test_df[1:5], as.data.frame(lapply(test_df[6:12], as.factor)))
dt_pred = predict(dt_mod, dt_test_df, type = "class")
# create confusion matrix
dt_c_matrix <- table(dt_pred, dt_test_df[, 12])
results <- get_results(dt_c_matrix)
return(dt_pred)
}
df_cluster_1 <- train_df[km$cluster ==2,]
df_cluster_1$headA <- as.factor(df_cluster_1$headA)
as.factor(train_df$headA)
build_decision_tree(df_cluster_1, test_df)
set.seed(123)
library(class)
build_knn <- function(df, test_df, class) {
knn_df = data.frame(df)
knn_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
# run knn
knn_pred <- knn(knn_df, knn_test_df, cl = class, k = 78, prob=TRUE)
# create confusion matrix
knn_c_matrix <- table(knn_pred, test_df$atRisk)
# print the results
knn_results <- get_results(knn_c_matrix)
return(knn_pred)
}
print("KNN  **********************")
df_cluster_1 <- train_df[km$cluster ==2,]
build_decision_tree(df_cluster_1, test_df, train_df$atRisk)
set.seed(123)
library(class)
build_knn <- function(df, test_df, class) {
knn_df = data.frame(df)
knn_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
# run knn
knn_pred <- knn(knn_df, knn_test_df, cl = class, k = 78, prob=TRUE)
# create confusion matrix
knn_c_matrix <- table(knn_pred, test_df$atRisk)
# print the results
knn_results <- get_results(knn_c_matrix)
return(knn_pred)
}
print("KNN  **********************")
df_cluster_1 <- train_df[km$cluster ==2,]
build_knn(df_cluster_1, test_df, train_df$atRisk)
set.seed(123)
library(class)
build_knn <- function(df, test_df, class) {
knn_df = data.frame(df)
knn_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
# run knn
knn_pred <- knn(knn_df, knn_test_df, cl = class, k = 78, prob=TRUE)
# create confusion matrix
knn_c_matrix <- table(knn_pred, test_df$atRisk)
# print the results
knn_results <- get_results(knn_c_matrix)
return(knn_pred)
}
print("KNN  **********************")
df_cluster_1 <- normalized_df[km$cluster ==2,]
build_knn(df_cluster_1, test_df, train_df$atRisk)
View(test_df)
View(test_df)
km_df <- data.frame(normalized_df, cluster =  as.factor(km$cluster))
BSS <- km$betweenss
TSS <- km$totss
BSS / TSS * 100
fviz_nbclust(km_df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2) + # add line for better visualisation
labs(subtitle = "Knee method") # add subtitle
set.seed(123)
library(purrr)
# function to calculate within sum of squares
calculate_wss <- function(k) {
kmeans(normalized_df, k, nstart = 10 )$tot.withinss
}
# clusters from 1 to 15
k <- 1:15
# apply calculate_wss function for k cluster and get vector
wss_values <- map_dbl(k, calculate_wss)
plot(k, wss_values,
type="b", pch = 15, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within sum of squares")
centorids_df <- data.frame(matrix(ncol = length(colnames(normalized_df)), nrow = 0))
colnames(centorids_df) <- colnames(normalized_df)
for (i in 1:5) {
cluster <- train_df[km$cluster==i, ]
centorids_df[nrow(centorids_df) + 1,] <- lapply(cluster[1:6], mean)
}
centorids_df
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(normalized_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~., data = svm_df, kernel = "linear")
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(normalized_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~temp+bpSys+vo2+throat+headA+bodyA, data = svm_df, kernel = "linear")
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(normalized_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~temp+bpSys+vo2+throat+headA+bodyA, data = train_df[1:6], kernel = "linear")
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(normalized_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~temp+bpSys+vo2+throat+headA+bodyA, data = train_df, kernel = "linear")
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df, get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(train_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~temp+bpSys+vo2+throat+headA+bodyA, data = svm_df, kernel = "linear")
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df, get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(train_df1:6)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(train_df[1:6])
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~temp+bpSys+vo2+throat+headA+bodyA, data = svm_df, kernel = "linear")
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df, get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
set.seed(123)
svm_test_df <- test_df
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(train_df[1:6])
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~temp+bpSys+vo2+throat+headA+bodyA, data = svm_df, )
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- test_df
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(normalized_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~., data = svm_df, kernel = "linear")
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(normalized_df)
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~., data = svm_df)
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df, type="vector")
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, svm_test_df)
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
# SVM
# for SVM use only temp, bpSys, vo2, throat, headA and bodyA.  Normalize them all and make them all numeric
set.seed(123)
svm_df = data.frame(train_df[1:6])
svm_df$atRisk = as.factor(train_df$atRisk)
svm_model <- svm(atRisk~., data = svm_df)
# use train from caret
# svm_model <-  train(
#   atRisk ~., data = train_df, method = "svmLinear",
#   trControl = trainControl("cv", number = 10),
#   preProcess = c("center","scale")
# )
print(svm_model)
# SVM
set.seed(123)
svm_test_df <- as.data.frame(lapply(test_df[2:7], get_normalized_data))
svm_test_df$atRisk = test_df$atRisk
svm_pred = predict(svm_model, test_df)
confusionMatrix(svm_pred, as.factor(svm_test_df$atRisk))
svm_c_matrix <- table(svm_pred, svm_test_df[,7])
get_results(svm_c_matrix)
